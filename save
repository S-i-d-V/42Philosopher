void	*memset(void *s, int c, size_t n);
int	usleep(useconds_t usec);																			Attends un nombre de miliseconde
int	gettimeofday(struc timeval *restrict tv, struct timezone *restrict tz);								Recupere l'heure actuel
int	pthread_create(pthread_t *restrict thread,															//Creer un nouveau THREAD dans le process parent
	//const pthread_attr_t *restrict attr, void *(*start_routine)(void *), void *restrict arg);
int	pthread_create(pthread_t thread);																	//Detaches un thread (A approfondir)
int	pthread_join(pthread_t thread, void **retval);														//Attend que le thread soit terminer
int	pthread_mutex_init(pthread_mutex_t *restrict mutex, const pthread_mutexattr_t *restrict attr);		//Init un mutex
int	pthread_mutex_destroy(pthread_mutex_t *mutex);														//Detruit un mutex
int	pthread_mutex_lock(pthread_mutex_t *mutex);															//Lock un mutex
int	pthread_mutex_unlock(pthread_mutex_t *mutex);														//Unlock un mutex